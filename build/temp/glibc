#!/bin/bash

#
# This file contains the scripts for building Glibc in the temporary system
#
# The package being built is:
#  * Glibc-2.28
#
# @author the_DJDJ
# @since  8.3-systemd
#

# Set results
status="${COLOUR_FOREGROUND_RED}Glibc-2.28 failed."
result=1



filename="glibc-2.28.tar.xz"
location="http://ftp.gnu.org/gnu/glibc/"
checksum="c81d2388896379997bc359d4f2084239"



# The instructions before the package is configured
preconfigure () {
    mkdir -v build
    cd       build
}



# The instructions for configuring the package
configure () {
    ../configure                           \
        --prefix=/tools                    \
        --host=$WANDER_TGT                 \
        --build=$(../scripts/config.guess) \
        --enable-kernel=3.2                \
        --with-headers=/tools/include      \
        libc_cv_forced_unwind=yes          \
        libc_cv_c_cleanup=yes
}



# The instructions for compiling the package
compile() {
    make
}



# The instructions after the package is configured
postconfigure() {
    :
}



# The instructions to install the package
install () {
    make install
}



# The instructions after the package is installed
postinstall() {
    :
}



# The instructions to test the package
test () {
    # Create a test file
    echo 'int main(){}' > dummy.c
    # Compile the test file
    $WANDER_TGT-gcc dummy.c
    # Verify that the output is correct
    output="$(echo $(readelf -l a.out | grep ': /tools') | sed 's/^ *//g')"
    echo $output
    if [ "$output" = "[Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]" ] ||
       [ "$output" = "[Requesting program interpreter: /tools/lib/ld-linux.so.2]" ];
    then
        result=0
    fi
    # And cleanup the test file
    rm -v dummy.c a.out
}


print_heading () {
    echo -n " * Glibc                                   "
}

print_heading

# Do the package things
if [ $build_temp_glibc = "yes" ] ; then
    build
else
    status="${COLOUR_FOREGROUND_BLUE}skipped"
    result=0
fi


echo -e $status $COLOUR_RESET
return $result
