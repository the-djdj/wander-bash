#!/bin/bash

#
# This file contains the scripts for building a temporary system on which
# Wander can be built.
#
# The packages to be compiled are:
#  * Binutils-2.31.1 - Pass 1
#  * GCC-8.2.0 - Pass 1
#  * Linux-4.18.5 API Headers
#  * Glibc-2.28
#  * Libstdc++ from GCC-8.2.0
#  * Binutils-2.31.1 - Pass 2
#  * GCC-8.2.0 - Pass 2
#  * Tcl-8.6.8
#  * Expect-5.45.4
#  * DejaGNU-1.6.1
#  * M4-1.4.18
#  * Ncurses-6.1
#  * Bash-4.4.18
#  * Bison-3.0.5
#  * Bzip2-1.0.6
#  * Coreutils-8.30
#  * Diffutils-3.6
#  * File-5.34
#  * Findutils-4.6.0
#  * Gawk-4.2.1
#  * Gettext-0.19.8.1
#  * Grep-3.1
#  * Gzip-1.9
#  * Make-4.2.1
#  * Patch-2.7.6
#  * Perl-5.28.0
#  * Sed-4.5
#  * Tar-1.30
#  * Texinfo-6.5
#  * Util-linux-2.32.1
#  * Xz-5.2.4
#
# @author the_DJDJ
# @since  8.3-systemd
#

# Show a nice welcome message
echo -e "$(COLOUR_COMBINE $COLOUR_SET_BOLD $COLOUR_FOREGROUND_GREY_LIGHT)Constructing temporary system:$COLOUR_RESET"

# Prepare the testing
result=0

# Change to the appropriate directory
directory=$PWD
cd $WANDER/sources

# The container method for acquiring sources. This downloads and verifies
getfile() {
    mkdir $directory/logs/temp/$2 &> /dev/null

    # Check to see if we can import the source from somewhere
    if [ ! -z $sources ]; then
        if [ ! -d $sources ]; then
            mkdir $sources
        elif [ -f "$sources/$2" ]; then
            cp $sources/$2 $SOURCEDIR/
        fi
    fi

    # And start the download process
    count=0
    verify $1 $2 $3

    # Finally, make sure that our file exists in the other source directory
    if [ ! -z $sources ]; then
        cp $SOURCEDIR/$2 $sources/
    fi
}

# A simple method to download the sources
download () {
    wget --directory-prefix=$SOURCEDIR "$1/$2" &> $directory/logs/temp/$2/wget.log
}

# A simple method to verify the sources
verify () {
    count=$((count + 1))
    if [ $count = 5 ]; then
        echo -e "${COLOUR_FOREGROUND_RED}unable to verify sources"
    elif [ -f "$SOURCEDIR/$2" ]; then
        if [ $3 != $(md5sum "$SOURCEDIR/$2" | cut -d ' ' -f 1) ]; then
            rm -rf $2
            download $1 $2
            verify $1 $2 $3
        else
            : # Verification successful!
        fi
    else
        download $1 $2
        verify $1 $2 $3
    fi
}

# A simple method to clean up source directories
cleanup() {
    rm -rf "$(echo $1 | rev | cut -d '.' -f 3- | rev)/" &> $directory/logs/temp/$1/cleanup.log
}

# The method to decompress source tarballs
decompress() {
    cleanup $1
    tar -xf $SOURCEDIR/$1 -C $WANDER/sources &> $directory/logs/temp/$1/tar.log
}

# The method to change into the source directory
change_directory () {
    cd "$(echo $1 | rev | cut -d '.' -f 3- | rev)"
}

# The method which does the building of the package
build () {
    # Download the file
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}downloading"
    getfile $location $filename $checksum
    echo -e -n $LINE_UP ; print_heading

    # Unpack the archive
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}unpacking"
    decompress $filename
    change_directory $filename
    echo -e -n $LINE_UP ; print_heading

    # Set timer
    SECONDS=0

    # Preconfigure
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}preconfiguring"
    preconfigure &> $directory/logs/temp/$filename/preconfigure.log
    echo -e -n $LINE_UP ; print_heading

    # Configure
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}configuring"
    configure &> $directory/logs/temp/$filename/configure.log
    echo -e -n $LINE_UP ; print_heading

    # Compile
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}compiling"
    compile &> $directory/logs/temp/$filename/compile.log
    echo -e -n $LINE_UP ; print_heading

    # Postconfigure
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}postconfiguring"
    postconfigure &> $directory/logs/temp/$filename/postconfigure.log
    echo -e -n $LINE_UP ; print_heading

    # Install
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}installing"
    install &> $directory/logs/temp/$filename/install.log
    echo -e -n $LINE_UP ; print_heading

    # Postinstall
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}postinstalling"
    postinstall &> $directory/logs/temp/$filename/postinstall.log
    echo -e -n $LINE_UP ; print_heading

    # Test
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}testing"
    test &> $directory/logs/temp/$filename/test.log
    echo -e -n $LINE_UP ; print_heading

    # Go back to the sources directory
    cd $WANDER/sources

    # Cleanup
    echo -e -n "${COLOUR_FOREGROUND_MAGENTA}cleaning up"
    cleanup $filename
    echo -e -n $LINE_UP ; print_heading

    duration=$SECONDS
    if [ $result -eq 0 ]; then
        status="${COLOUR_FOREGROUND_GREEN}ok              ${COLOUR_RESET}($((duration / 3600))h $(((duration / 60) - (duration / 3600 * 60)))m $(($duration % 60))s)"
    fi
}

# And do the building
if [ $result -eq 0 ]; then source $directory/build/temp/binutils_1;     fi
if [ $result -eq 0 ]; then source $directory/build/temp/gcc_1;          fi
if [ $result -eq 0 ]; then source $directory/build/temp/linux_headers;  fi
if [ $result -eq 0 ]; then source $directory/build/temp/glibc;          fi
if [ $result -eq 0 ]; then source $directory/build/temp/libstdc++;      fi
if [ $result -eq 0 ]; then source $directory/build/temp/binutils_2;     fi
if [ $result -eq 0 ]; then source $directory/build/temp/gcc_2;          fi

# Output results
if [ $result -eq 0 ]; then
    status="${COLOUR_FOREGROUND_GREEN}ok"
else
    status="${COLOUR_FOREGROUND_RED}failed"
fi

echo -n -e "Construction $status${COLOUR_RESET}."

# Go back to where we were a moment ago
cd $directory

# And cleanup
return $result
